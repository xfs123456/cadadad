void __fastcall BeepRedirectCsqRemoveIrp(PIO_CSQ Csq, PIRP Irp)
{
  _IRP::$::$2AD798E65616C4F7304824DBFA27E419::$665C8370128C04AB892B069E6FB086E8 *p_ListEntry; // rdx
  _LIST_ENTRY *Flink; // rcx
  _LIST_ENTRY *Blink; // rax

  p_ListEntry = (_IRP::$::$2AD798E65616C4F7304824DBFA27E419::$665C8370128C04AB892B069E6FB086E8 *)&Irp->Tail.Overlay.ListEntry;
  Flink = p_ListEntry->ListEntry.Flink;
  Blink = p_ListEntry->ListEntry.Blink;
  if ( (_IRP::$::$2AD798E65616C4F7304824DBFA27E419::$665C8370128C04AB892B069E6FB086E8 *)p_ListEntry->ListEntry.Flink->Blink != p_ListEntry
    || (_IRP::$::$2AD798E65616C4F7304824DBFA27E419::$665C8370128C04AB892B069E6FB086E8 *)Blink->Flink != p_ListEntry )
  {
    __fastfail(3u);
  }
  Blink->Flink = Flink;
  Flink->Blink = Blink;
}



void __fastcall BeepRedirectCsqCompleteCanceledIrp(PIO_CSQ Csq, PIRP Irp)
{
  Irp->IoStatus.Status = -1073741536;
  Irp->IoStatus.Information = 0i64;
  IofCompleteRequest(Irp, 0);
}




__int64 __fastcall BeepCleanup(__int64 a1, IRP *a2)
{
  KIRQL v4; // si
  __int64 v5; // rdx
  PKDEVICE_QUEUE_ENTRY v7; // rax
  PKDEVICE_QUEUE_ENTRY v8; // rbp
  KIRQL Irql; // [rsp+40h] [rbp+8h] BYREF

  v4 = KfRaiseIrql(2u);
  IoAcquireCancelSpinLock(&Irql);
  v5 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 32) = 0i64;
  if ( v5 )
  {
    while ( 1 )
    {
      v7 = KeRemoveDeviceQueue((PKDEVICE_QUEUE)(a1 + 160));
      if ( !v7 )
        break;
      v8 = v7 - 5;
      if ( v7 == (PKDEVICE_QUEUE_ENTRY)120 )
        break;
      _InterlockedExchange64((volatile __int64 *)&v8[4].DeviceListEntry.Blink, 0i64);
      LODWORD(v8[2].DeviceListEntry.Flink) = -1073741536;
      v8[2].DeviceListEntry.Blink = 0i64;
      IoReleaseCancelSpinLock(Irql);
      IofCompleteRequest((PIRP)v8, 0);
      IoAcquireCancelSpinLock(&Irql);
    }
  }
  IoReleaseCancelSpinLock(Irql);
  KeLowerIrql(v4);
  BeepRedirectMakeBeep(a1, a2, 0i64, 0i64);
  a2->IoStatus.Status = 0;
  a2->IoStatus.Information = 0i64;
  IofCompleteRequest(a2, 0);
  return 0i64;


}


















NTSTATUS __fastcall BeepRedirectMakeBeep(__int64 a1, IRP *a2, int a3, int a4)
{
  NTSTATUS result; // eax
  NTSTATUS v8; // ebx
  PIRP v9; // rax
  _IRP *MasterIrp; // rcx
  ULONG pSessionId[6]; // [rsp+20h] [rbp-18h] BYREF

  result = IoGetRequestorSessionId(a2, pSessionId);
  v8 = result;
  if ( result >= 0 )
  {
    v9 = IoCsqRemoveNextIrp((PIO_CSQ)(*(_QWORD *)(a1 + 64) + 96i64), (PVOID)pSessionId[0]);
    if ( !v9 )
      return -1073741275;
    MasterIrp = v9->AssociatedIrp.MasterIrp;
    *(_DWORD *)&MasterIrp->Type = a3;
    *(_DWORD *)(&MasterIrp->Size + 1) = a4;
    v9->IoStatus.Status = 0;
    v9->IoStatus.Information = 8i64;
    IofCompleteRequest(v9, 0);
    return v8;
  }
  return result;
}











__int64 __fastcall BeepClose(__int64 a1, IRP *a2)
{
  struct _FAST_MUTEX *v2; // rbx

  v2 = *(struct _FAST_MUTEX **)(a1 + 64);
  ExAcquireFastMutex(v2);
  if ( v2[1].Count-- == 1 )
    MmUnlockPagableImageSection(v2[1].Owner);
  ExReleaseFastMutex(v2);
  a2->IoStatus.Status = 0;
  a2->IoStatus.Information = 0i64;
  IofCompleteRequest(a2, 0);
  return 0i64;
}

















_LIST_ENTRY **__fastcall BeepRedirectCsqPeekNextIrp(PIO_CSQ Csq, PIRP Irp, PVOID PeekContext)
{
  _LIST_ENTRY **p_CsqCompleteCanceledIrp; // rbx
  int v4; // esi
  _LIST_ENTRY *Flink; // rdi
  ULONG pSessionId; // [rsp+30h] [rbp+8h] BYREF

  p_CsqCompleteCanceledIrp = (_LIST_ENTRY **)&Csq[-1].CsqCompleteCanceledIrp;
  v4 = (int)PeekContext;
  if ( Irp )
    Flink = Irp->Tail.Overlay.ListEntry.Flink;
  else
    Flink = *p_CsqCompleteCanceledIrp;
  if ( Flink == (_LIST_ENTRY *)p_CsqCompleteCanceledIrp )
    return 0i64;
  while ( IoGetRequestorSessionId((PIRP)&Flink[-11].Blink, &pSessionId) >= 0 && pSessionId != v4 && v4 != -1 )
  {
    Flink = Flink->Flink;
    if ( Flink == (_LIST_ENTRY *)p_CsqCompleteCanceledIrp )
      return 0i64;
  }
  return &Flink[-11].Blink;
}




void __fastcall BeepRedirectCsqAcquireLock(PIO_CSQ Csq, PKIRQL Irql)
{
  *Irql = KeAcquireSpinLockRaiseToDpc((PKSPIN_LOCK)&Csq[-1].CsqReleaseLock);
}



















NTSTATUS __stdcall DriverEntry(_DRIVER_OBJECT *DriverObject, PUNICODE_STRING RegistryPath)
{
  NTSTATUS result; // eax
  char *DeviceExtension; // rdi
  _DEVICE_OBJECT *v5; // rcx
  struct _UNICODE_STRING DestinationString; // [rsp+40h] [rbp-18h] BYREF
  PDEVICE_OBJECT DeviceObject; // [rsp+68h] [rbp+10h] BYREF

  DeviceObject = (PDEVICE_OBJECT)RegistryPath;
  RtlInitUnicodeString(&DestinationString, L"\\Device\\Beep");
  result = IoCreateDevice(DriverObject, 0xA0u, &DestinationString, 1u, 0x100u, 0, &DeviceObject);
  if ( !result )
  {
    DeviceObject->Flags |= 4u;
    DeviceExtension = (char *)DeviceObject->DeviceExtension;
    *(_DWORD *)DeviceExtension = 1;
    *((_QWORD *)DeviceExtension + 1) = 0i64;
    *((_DWORD *)DeviceExtension + 4) = 0;
    KeInitializeEvent((PRKEVENT)DeviceExtension + 1, SynchronizationEvent, 0);
    *((_DWORD *)DeviceExtension + 14) = 0;
    *((_QWORD *)DeviceExtension + 11) = DeviceExtension + 80;
    *((_QWORD *)DeviceExtension + 10) = DeviceExtension + 80;
    KeInitializeSpinLock((PKSPIN_LOCK)DeviceExtension + 9);
    result = IoCsqInitialize(
               (PIO_CSQ)(DeviceExtension + 96),
               (PIO_CSQ_INSERT_IRP)BeepRedirectCsqInsertIrp,
               (PIO_CSQ_REMOVE_IRP)BeepRedirectCsqRemoveIrp,
               BeepRedirectCsqPeekNextIrp,
               (PIO_CSQ_ACQUIRE_LOCK)BeepRedirectCsqAcquireLock,
               (PIO_CSQ_RELEASE_LOCK)BeepRedirectCsqReleaseLock,
               BeepRedirectCsqCompleteCanceledIrp);
    if ( !result )
    {
      v5 = DeviceObject;
      DriverObject->DriverStartIo = (PDRIVER_STARTIO)BeepStartIo;
      DriverObject->DriverUnload = (PDRIVER_UNLOAD)BeepUnload;
      DriverObject->MajorFunction[0] = (PDRIVER_DISPATCH)BeepOpen;
      DriverObject->MajorFunction[2] = (PDRIVER_DISPATCH)BeepClose;
      DriverObject->MajorFunction[14] = (PDRIVER_DISPATCH)BeepDeviceControl;
      DriverObject->MajorFunction[18] = (PDRIVER_DISPATCH)BeepCleanup;
      IoSetStartIoAttributes(v5, 1u, 0);
      return 0;
    }
  }
  return result;
}















void __fastcall BeepRedirectCsqReleaseLock(PIO_CSQ Csq, KIRQL Irql)
{
  KeReleaseSpinLock((PKSPIN_LOCK)&Csq[-1].CsqReleaseLock, Irql);
}

















__int64 __fastcall BeepOpen(__int64 a1, IRP *a2)
{
  struct _FAST_MUTEX *v2; // rbx

  v2 = *(struct _FAST_MUTEX **)(a1 + 64);
  ExAcquireFastMutex(v2);
  if ( ++v2[1].Count == 1 )
    v2[1].Owner = MmLockPagableDataSection(BeepOpen);
  ExReleaseFastMutex(v2);
  a2->IoStatus.Status = 0;
  a2->IoStatus.Information = 0i64;
  IofCompleteRequest(a2, 0);
  return 0i64;
}













void guard_check_icall_nop()
{
  ;
}


__int64 __fastcall guard_dispatch_icall_nop()
{
  __int64 (*v0)(void); // rax

  return v0();
}












void __fastcall BeepCancel(_DEVICE_OBJECT *DeviceObject, _IRP *Irp)
{
  KIRQL CancelIrql; // cl
  BOOLEAN v4; // al

  if ( Irp == DeviceObject->CurrentIrp )
  {
    CancelIrql = Irp->CancelIrql;
LABEL_3:
    IoReleaseCancelSpinLock(CancelIrql);
    return;
  }
  v4 = KeRemoveEntryDeviceQueue(&DeviceObject->DeviceQueue, &Irp->Tail.Overlay.DeviceQueueEntry);
  CancelIrql = Irp->CancelIrql;
  if ( !v4 )
    goto LABEL_3;
  IoReleaseCancelSpinLock(CancelIrql);
  Irp->IoStatus.Status = -1073741536;
  Irp->IoStatus.Information = 0i64;
  IofCompleteRequest(Irp, 0);
}















void __fastcall BeepStartIo(PDEVICE_OBJECT DeviceObject, PIRP Irp)
{
  NTSTATUS Beep; // eax
  KIRQL Irql; // [rsp+38h] [rbp+10h] BYREF

  IoAcquireCancelSpinLock(&Irql);
  if ( Irp )
  {
    _InterlockedExchange64((volatile __int64 *)&Irp->CancelRoutine, 0i64);
    IoReleaseCancelSpinLock(Irql);
    if ( Irp->Tail.Overlay.CurrentStackLocation->Parameters.Read.ByteOffset.LowPart == 0x10000 )
      Beep = BeepRedirectMakeBeep(
               DeviceObject,
               Irp,
               *(unsigned int *)Irp->AssociatedIrp.MasterIrp,
               *(unsigned int *)(&Irp->AssociatedIrp.MasterIrp->Size + 1));
    else
      Beep = -1073741811;
    Irp->IoStatus.Status = Beep;
    Irp->IoStatus.Information = 0i64;
    IoStartNextPacket(DeviceObject, 1u);
    IofCompleteRequest(Irp, 0);
  }
  else
  {
    IoReleaseCancelSpinLock(Irql);
  }
}














void __fastcall BeepUnload(__int64 a1)
{
  _DEVICE_OBJECT *v1; // rbx
  char *DeviceExtension; // rdi
  PIRP i; // rax

  v1 = *(_DEVICE_OBJECT **)(a1 + 8);
  DeviceExtension = (char *)v1->DeviceExtension;
  for ( i = IoCsqRemoveNextIrp((PIO_CSQ)(DeviceExtension + 96), (PVOID)0xFFFFFFFFFFFFFFFFi64);
        i;
        i = IoCsqRemoveNextIrp((PIO_CSQ)(DeviceExtension + 96), (PVOID)0xFFFFFFFFFFFFFFFFi64) )
  {
    i->IoStatus.Status = -1073741536;
    i->IoStatus.Information = 0i64;
    IofCompleteRequest(i, 0);
  }
  IoDeleteDevice(v1);
}




void __cdecl __noreturn _report_gsfailure(uintptr_t StackCookie)
{
  __fastfail(2u);
}




NTSTATUS __stdcall GsDriverEntry(PDRIVER_OBJECT DriverObject, PUNICODE_STRING RegistryPath)
{
  _DRIVER_OBJECT *v2; // rdx

  _security_init_cookie();
  return DriverEntry(v2, (PUNICODE_STRING)v2);
}




void __cdecl _security_init_cookie()
{
  if ( !_security_cookie || _security_cookie == 0x2B992DDFA232i64 )
    __fastfail(6u);
}